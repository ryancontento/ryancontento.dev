<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Ryan Contento Blog</title>
    <link>https://ryancontento.dev/categories/development/</link>
    <description>Recent content in Development on Ryan Contento Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2020 copyright text.</copyright>
    <lastBuildDate>Sat, 09 Jul 2022 14:05:58 -0400</lastBuildDate><atom:link href="https://ryancontento.dev/categories/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multidimensional Arrays in C#</title>
      <link>https://ryancontento.dev/posts/multidimensional-arrays-in-csharp/</link>
      <pubDate>Sat, 09 Jul 2022 14:05:58 -0400</pubDate>
      
      <guid>https://ryancontento.dev/posts/multidimensional-arrays-in-csharp/</guid>
      <description>What Are Multidimensional Arrays? A multidimensional array is an array of arrays. This means it will have multiple levels. This is also commonly called a matrix or table. In this article, we will be going over how to implement a simple 2D array in C# and some other options for taking this technique a bit further!
2D Arrays Here are 3 standard arrays of strings:
string[] fruit = {&amp;#34;apple&amp;#34;, &amp;#34;banana&amp;#34;, &amp;#34;peach&amp;#34;} string[] vegetable = {&amp;#34;peas&amp;#34;, &amp;#34;kale&amp;#34;, &amp;#34;carrot&amp;#34;} string[] meat = {&amp;#34;chicken&amp;#34;, &amp;#34;beef&amp;#34;, &amp;#34;lamb&amp;#34;} Now, what if we wanted to combine these foods into one large array?</description>
    </item>
    
    <item>
      <title>Blazor Component Lifecycle</title>
      <link>https://ryancontento.dev/posts/blazor-component-lifecycle/</link>
      <pubDate>Mon, 04 Jul 2022 18:13:24 -0400</pubDate>
      
      <guid>https://ryancontento.dev/posts/blazor-component-lifecycle/</guid>
      <description>Blazor is a component based framework, and like all of these modern frameworks, every component has a lifecycle. They are rendered, they exist in the UI, and eventually are disposed. There are 7 main methods that handle the lifecycle of a Blazor/razor component. These components are processed with a set of synchronous and asynchronous methods. All Blazor lifecycle methods are provided by the ComponentBase class, which all components inherit from. For the methods other than the first one we will cover, the synchronous version is always called before the asynchronous one.</description>
    </item>
    
    <item>
      <title>Introduction to Blazor</title>
      <link>https://ryancontento.dev/posts/introduction-to-blazor/</link>
      <pubDate>Sun, 03 Jul 2022 21:58:06 -0400</pubDate>
      
      <guid>https://ryancontento.dev/posts/introduction-to-blazor/</guid>
      <description>Blazor is Microsofts latest SPA (Single Page Application) framework. Blazor is open source, cross platform, and uses the power of WebAssembly to allow us to use .NET in the browser! If you love C#, .NET MVC, or just new and interesting frameworks, Blazor may be for you.
What’s WebAssembly? WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</description>
    </item>
    
  </channel>
</rss>
